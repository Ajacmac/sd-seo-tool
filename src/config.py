"""
Settings for the application

Some of these really aren't necessary. Most were generated by Sonnet and I
should go through them at some point and trim them down.
"""

import os
from typing import List

# Determine the environment
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")

# Load .env file if in development
if ENVIRONMENT == "development":
    from dotenv import load_dotenv

    load_dotenv()

# Databases
KEYWORD_CACHE_PATH = os.getenv("KEYWORD_CACHE_PATH", "/volume/db/keyword_cache.db")
JOBS_DB_PATH = os.getenv("CLIENT_JOBS_PATH", "/volume/db/client_jobs.db")
OAUTH_DB_PATH = os.getenv("OAUTH_DB_PATH", "/volume/db/oauth.db")

# OAuth
GOOGLE_OAUTH_CLIENT_ID = os.getenv("GOOGLE_OAUTH_CLIENT_ID")
GOOGLE_OAUTH_CLIENT_SECRET = os.getenv("GOOGLE_OAUTH_CLIENT_SECRET")

# Session
SECRET_KEY = os.getenv("OAUTH_SESSION_KEY")

# Authorization
AUTHORIZED_DOMAIN = "samson.digital"
AUTHORIZED_EMAILS: List[str] = ["projects@samson.digital", "info@samson.digital"]

# API Settings
API_V1_STR = "/api/v1"

# Application Settings
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "t")

# Logging
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")

# Job Settings
MAX_JOBS_PER_USER = int(os.getenv("MAX_JOBS_PER_USER", "5"))
JOB_TIMEOUT_SECONDS = int(os.getenv("JOB_TIMEOUT_SECONDS", "3600"))  # 1 hour default

# Rate Limiting
RATE_LIMIT_PER_MINUTE = int(os.getenv("RATE_LIMIT_PER_MINUTE", "60"))

# External Services
TWINWORD_API_KEY = os.getenv("TWINWORD_API_KEY")


def get_cors_origins() -> List[str]:
    origins = os.getenv("CORS_ORIGINS", "")
    if origins == "*":
        # In production, it's better to specify allowed origins explicitly
        return ["https://internal-seo-tool.samson.digital", "https://seo-tool.fly.dev"]
    return origins.split(",")


# Security
CORS_ORIGINS = get_cors_origins()


# Validation function
def validate_config():
    required_env_vars = [
        "GOOGLE_OAUTH_CLIENT_ID",
        "GOOGLE_OAUTH_CLIENT_SECRET",
        "OAUTH_SESSION_KEY",
        "TWINWORD_API_KEY",
    ]

    for var in required_env_vars:
        if os.getenv(var) is None:
            raise ValueError(f"Required environment variable {var} is not set.")

    if not GOOGLE_OAUTH_CLIENT_ID or not GOOGLE_OAUTH_CLIENT_SECRET:
        raise ValueError("Google OAuth credentials are not properly configured.")

    if not SECRET_KEY:
        raise ValueError("Session secret key is not set.")

    if ENVIRONMENT not in ["development", "staging", "production"]:
        raise ValueError(f"Invalid ENVIRONMENT value: {ENVIRONMENT}")


# Run validation
validate_config()
